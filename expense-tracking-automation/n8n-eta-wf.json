{
  "nodes": [
    {
      "parameters": {
        "content": "# ðŸ’¸ SpendSense - Automated Expense Tracking\n\nStreamline expense tracking using an n8n workflow with multi-channel inputs (Email, Form, Telegram) and AI-powered processing.\n\n## 1. Capture Expenses\n\n**Input Channels:**\n- **Email:** Monitors email for expense-related emails.\n- **Form (SpendSense):** Allows manual entry and image upload.\n- **Telegram Bot:** Accepts text and optional image uploads.\n\n**Processing Steps:**\n- Aggregates input text + context.\n- Uses Google Gemini AI to extract:\n  - Amount, Date, Merchant, Category, Payment Method, Notes.\n- Cleans/validates JSON.\n- Saves to Airtable.\n\n*Note:* AI uses only text, not image content.\n\n## 2. Monthly Reporting\n\n**Trigger:** Scheduled (e.g., 9 AM on the 1st of each month).\n\n**Steps:**\n- Calculates previous month's date range.\n- Fetches expenses from Airtable.\n- Generates HTML report (totals, category breakdown, top expenses).\n- Sends via Gmail to `[YOUR_RECIPIENT_EMAIL_HERE]`.\n\n## âœ… Outcome\n\n- Unified expense capture (Email, Form, Telegram)\n- AI-driven detail extraction\n- Airtable storage\n- Automated monthly reporting\n",
        "height": 980,
        "width": 580,
        "color": 5
      },
      "id": "123607b3-419b-44e4-82ac-53a51a90f2d8",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        60,
        40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Section 2: Monthly Expense Report Generation & Delivery (Scheduled)",
        "height": 340,
        "width": 1160,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        660,
        680
      ],
      "id": "0f440930-7c2d-45bd-aaab-a28a72c3405e",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Section 1: Expense Data Capture & AI Extraction (Gmail, Form, Telegram)",
        "height": 620,
        "width": 1160,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        660,
        40
      ],
      "id": "d3c79e8f-c7d7-4047-9269-d8da711fee77",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "sender": "[YOUR_SENDER_EMAIL_HERE]"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        720,
        100
      ],
      "id": "0179736b-2778-4433-8123-82a438750c73",
      "name": "Gmail Trigger - Expense Emails",
      "credentials": {
        "gmailOAuth2": {
          "id": "[YOUR_GMAIL_CREDENTIAL_ID_HERE]",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "formTitle": "SpendSense",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Reciept ",
              "fieldType": "file"
            },
            {
              "fieldLabel": "Description",
              "placeholder": "Enter your expense in general English."
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        720,
        320
      ],
      "id": "e35536a2-7021-4e02-b8e6-1c8a849fe13e",
      "name": "On form submission",
      "webhookId": "[WILL_BE_AUTOGENERATED_ON_IMPORT]"
    },
    {
      "parameters": {
        "jsCode": "// --- Get Input String ---\n\n// Assuming the input string like \"```json\\n{...}\\n```\"\n// is the primary output of the previous node, often in $input.item.json\n// Adjust the access path if the string is nested deeper (e.g., $input.item.json.result)\nlet rawString = \"\";\nconst inputData = $input.first().json.output; // <<< ADJUST THIS if needed based on previous node's output structure\n\n// Robustly try to find the string if the input isn't directly the string\nif (typeof inputData === 'string') {\n    rawString = inputData;\n} else if (typeof inputData === 'object' && inputData !== null) {\n    // Try common keys where LLM output might be stored\n    const potentialKeys = ['result', 'output', 'text', 'response', 'message', 'content'];\n    let found = false;\n    for (const key of potentialKeys) {\n        if (typeof inputData[key] === 'string') {\n            rawString = inputData[key];\n            found = true;\n            break;\n        }\n    }\n    // Fallback: if only one key exists, assume its value is the target string\n    if (!found) {\n        const keys = Object.keys(inputData);\n        if (keys.length === 1 && typeof inputData[keys[0]] === 'string') {\n            rawString = inputData[keys[0]];\n            found = true;\n        }\n    }\n    if (!found) {\n        console.error(\"Could not find the target string within the input object:\", inputData);\n        return { error: \"Could not find target string in input object.\" };\n    }\n} else {\n    console.error(\"Input is not a string or a usable object:\", inputData);\n    return { error: \"Invalid input type received.\" };\n}\n\n// --- Clean the String ---\n\n// 1. Trim whitespace from the start and end\nlet cleanedString = rawString.trim();\n\n// 2. Remove the starting Markdown fence \"```json\\n\" or \"```json\" or just \"```\"\nif (cleanedString.startsWith(\"```json\")) {\n    // Find the first newline after the fence and take everything after it\n    const firstNewlineIndex = cleanedString.indexOf('\\n');\n    if (firstNewlineIndex !== -1) {\n        cleanedString = cleanedString.substring(firstNewlineIndex + 1);\n    } else {\n        // Handle case where there's no newline after ```json\n        cleanedString = cleanedString.substring(7); // Length of \"```json\"\n    }\n} else if (cleanedString.startsWith(\"```\")) {\n     // Handle case where it might just be ``` without the language\n     const firstNewlineIndex = cleanedString.indexOf('\\n');\n     if (firstNewlineIndex !== -1 && firstNewlineIndex === 3) { // Check if newline is right after ```\n         cleanedString = cleanedString.substring(firstNewlineIndex + 1);\n     } else {\n        cleanedString = cleanedString.substring(3); // Remove just ```\n     }\n}\n\n// 3. Remove the ending Markdown fence \"\\n```\" or just \"```\"\nif (cleanedString.endsWith(\"\\n```\")) {\n    cleanedString = cleanedString.substring(0, cleanedString.length - 4); // Remove \\n```\n} else if (cleanedString.endsWith(\"```\")) {\n    cleanedString = cleanedString.substring(0, cleanedString.length - 3); // Remove ```\n}\n\n// 4. Trim whitespace again (important after removing fences)\ncleanedString = cleanedString.trim();\n\n// --- Parse JSON ---\nlet parsedJson;\ntry {\n    parsedJson = JSON.parse(cleanedString);\n\n    // Optional: Basic validation of expected structure (can add more fields)\n    if (typeof parsedJson.Amount === 'undefined' || typeof parsedJson.Date === 'undefined') {\n         console.warn(\"Parsed JSON might be missing expected fields.\");\n         // Decide whether to proceed or error out\n         // throw new Error(\"Parsed JSON missing core fields like Amount or Date.\");\n    }\n\n} catch (error) {\n    console.error(\"Error parsing JSON string:\", error.message);\n    console.error(\"String content attempted to parse:\", cleanedString); // Log the problematic string\n    // Return detailed error information\n    return {\n      json: { // Keep standard N8N structure for error handling\n        error: `Failed to parse JSON after cleaning: ${error.message}`,\n        originalString: rawString,\n        cleanedStringAttempt: cleanedString\n      }\n    };\n}\n\n// --- Return the Cleaned JSON Object ---\n// Return in the standard N8N format { json: {...} }\nreturn { json: parsedJson };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        280
      ],
      "id": "2178c98e-be1a-4b8f-aeb4-c67143195857",
      "name": "Code - Clean & Validate Email Extraction"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        720,
        780
      ],
      "id": "ff4b4065-0227-40aa-b5f4-6960b95f318d",
      "name": "Schedule Trigger - Monthly Report"
    },
    {
      "parameters": {
        "jsCode": "// Calculate Start and End Dates of the Previous Calendar Month\n\nconst today = new Date();\n\n// 1. Get the first day of the current month\nconst firstDayCurrentMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n\n// 2. Get the last day of the previous month\n// Go back one millisecond from the first day of the current month\nconst lastDayPreviousMonth = new Date(firstDayCurrentMonth.getTime() - 1);\n\n// 3. Get the first day of the previous month\nconst firstDayPreviousMonth = new Date(lastDayPreviousMonth.getFullYear(), lastDayPreviousMonth.getMonth(), 1);\n\n// 4. Format dates as YYYY-MM-DD for Airtable DATETIME_PARSE\nconst formatDate = (date) => {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\nconst startDate = formatDate(firstDayPreviousMonth);\nconst endDate = formatDate(lastDayPreviousMonth);\n\n// Return the dates for the next node (Airtable)\nreturn { json: { startDate, endDate } };\n"
      },
      "id": "234360ab-3854-42f9-aa1b-6a317b071d67",
      "name": "Code - Calculate Prev Month Dates",
      "type": "n8n-nodes-base.code",
      "position": [
        920,
        780
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "authentication": "airtableOAuth2Api",
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "[YOUR_AIRTABLE_BASE_ID_HERE]",
          "mode": "list",
          "cachedResultName": "Your Airtable Base Name",
          "cachedResultUrl": "https://airtable.com/[YOUR_AIRTABLE_BASE_ID_HERE]"
        },
        "table": {
          "__rl": true,
          "value": "[YOUR_AIRTABLE_TABLE_ID_HERE]",
          "mode": "list",
          "cachedResultName": "Your Table Name",
          "cachedResultUrl": "https://airtable.com/[YOUR_AIRTABLE_BASE_ID_HERE]/[YOUR_AIRTABLE_TABLE_ID_HERE]"
        },
        "filterByFormula": "=AND(IS_AFTER({Date}, DATETIME_PARSE('{{ $('Code - Calculate Prev Month Dates').item.json.startDate }}', 'YYYY-MM-DD')), IS_BEFORE({Date}, DATEADD(DATETIME_PARSE('{{ $('Code - Calculate Prev Month Dates').item.json.endDate }}', 'YYYY-MM-DD'), 1, 'day')))\n",
        "options": {},
        "sort": {
          "property": [
            {
              "field": "submittedAt"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        1120,
        780
      ],
      "id": "46044716-9198-4963-9a04-e7b3a2bf3831",
      "name": "Airtable - Get Prev Month Data",
      "alwaysOutputData": true,
      "credentials": {
        "airtableOAuth2Api": {
          "id": "[YOUR_AIRTABLE_CREDENTIAL_ID_HERE]",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// --- N8N Data Extraction ---\nconst n8nItems = $input.all(); // Get all items from the Airtable node\n\n// Check if there's any data\nif (n8nItems.length === 0) {\n  console.warn(\"No expense data found for the previous month.\");\n  // Optionally return an empty HTML or a notification message\n  // For now, we'll let it proceed and the report will show \"No data\"\n  // return { json: { htmlContent: \"<html><body>No expense data found for the specified period.</body></html>\" } };\n}\n\nconst expenseData = n8nItems.map(item => item.json);\n\n// --- Calculation & Enhanced HTML Generation Function ---\n\nfunction generateExpenseReportHtml(rawData) {\n    // --- Configuration ---\n    const CURRENCY_SYMBOL = \"â‚¹\";\n    const TOP_N_EXPENSES = 5;\n    const TOP_N_MERCHANTS = 5;\n    const LOCALE = 'en-IN';\n\n    // --- Helper Functions ---\n    function escapeHtml(unsafe) {\n        if (unsafe === null || typeof unsafe === 'undefined') return '';\n        return String(unsafe)\n             .replace(/&/g, \"&\") // Use & for HTML escaping\n             .replace(/</g, \"<\")\n             .replace(/>/g, \">\")\n             .replace(/\"/g, '\"')\n             .replace(/'/g, \"'\"); // Use ' for single quote\n    }\n    function formatCurrency(amount) {\n        if (isNaN(amount) || amount === null) return `${CURRENCY_SYMBOL}0.00`;\n        return `${CURRENCY_SYMBOL}${amount.toLocaleString(LOCALE, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n    }\n     function formatDateYYYYMMDD(date) {\n         if (!date || isNaN(new Date(date).getTime())) return 'N/A';\n         const d = new Date(date); // Ensure it's a Date object\n        const year = d.getFullYear();\n        const month = (d.getMonth() + 1).toString().padStart(2, '0');\n        const day = d.getDate().toString().padStart(2, '0');\n        return `${year}-${month}-${day}`;\n    }\n    function formatDateMonDDYYYY(date) {\n         if (!date || isNaN(new Date(date).getTime())) return 'N/A';\n         const d = new Date(date); // Ensure it's a Date object\n        const options = { year: 'numeric', month: 'short', day: 'numeric' };\n        return d.toLocaleDateString(LOCALE, options);\n    }\n    function truncateText(text, maxLength = 40) {\n         const safeText = text || '';\n         if (safeText.length <= maxLength) return safeText || '-';\n         return escapeHtml(safeText.slice(0, maxLength - 3)) + '...'; // Escape truncated part too\n    }\n\n    // --- Initial Processing & Validation ---\n     const errorHtml = (message) => `<!DOCTYPE html><html><head><title>Report Error</title></head><body style=\"font-family: sans-serif; color: red; padding: 20px;\">Error generating report: ${escapeHtml(message)}</body></html>`;\n\n    if (!Array.isArray(rawData)) { // Raw data IS the array from .map() earlier\n        return errorHtml(\"Invalid input data format received by generate function.\");\n    }\n    if (rawData.length === 0) {\n        // Generate a report indicating no data, instead of an error\n        // We'll handle this within the main HTML structure later\n    }\n\n    const processedExpenses = rawData.map(entry => {\n        const amount = parseFloat(entry?.Amount ?? entry?.amount ?? NaN);\n        const dateStr = entry?.Date ?? entry?.date; // Expecting ISO string or YYYY-MM-DD from Airtable\n        let dateObj = null;\n        if (typeof dateStr === 'string') {\n           try { dateObj = new Date(dateStr); if (isNaN(dateObj.getTime())) dateObj = null; } catch(e) { dateObj = null; }\n        }\n        // Allow entries with 0 amount, but require a valid date\n        if (isNaN(amount) || !dateObj) return null;\n\n        return {\n            id: entry.id,\n            amount: amount,\n            date: dateObj, // Keep as Date object for sorting\n            dateStr: formatDateYYYYMMDD(dateObj), // Format consistently\n            category: entry?.Category ?? entry?.category ?? 'Uncategorized',\n            paymentMethod: entry['Payment Method'] ?? entry?.paymentMethod ?? 'Unknown',\n            merchant: entry['Merchant/Vendor'] ?? entry?.merchant ?? 'N/A',\n            notes: entry['Description / Notes'] ?? entry?.notes ?? '' // Default to empty string\n        };\n    }).filter(entry => entry !== null);\n\n\n    // --- Calculations ---\n    let report_month_year = 'N/A';\n    let report_start_date = 'N/A';\n    let report_end_date = 'N/A';\n    let total_spent = 0;\n    let total_expense_count = 0;\n    let average_daily_spending = 0;\n    let highest_expense_details_raw = 'N/A';\n    let numUniqueDays = 0;\n    let startDate = null;\n    let endDate = null;\n\n    const categoryTotals = new Map();\n    const paymentMethodTotals = new Map();\n    const merchantTotals = new Map();\n    const dailySpending = new Map();\n\n    if (processedExpenses.length > 0) {\n        processedExpenses.sort((a, b) => a.date - b.date);\n        startDate = processedExpenses[0].date;\n        endDate = processedExpenses[processedExpenses.length - 1].date;\n        report_month_year = endDate.toLocaleDateString(LOCALE, { year: 'numeric', month: 'long' });\n        report_start_date = formatDateYYYYMMDD(startDate);\n        report_end_date = formatDateYYYYMMDD(endDate);\n        total_spent = processedExpenses.reduce((sum, e) => sum + e.amount, 0);\n        total_expense_count = processedExpenses.length;\n        const uniqueExpenseDays = new Set(processedExpenses.map(e => e.dateStr));\n        numUniqueDays = uniqueExpenseDays.size;\n        average_daily_spending = total_spent > 0 && numUniqueDays > 0 ? total_spent / numUniqueDays : 0;\n        const highestExpenseEntry = processedExpenses.reduce((max, e) => (e.amount > max.amount ? e : max), { amount: -Infinity });\n        highest_expense_details_raw = highestExpenseEntry.amount > -Infinity\n            ? `${formatCurrency(highestExpenseEntry.amount)} on ${escapeHtml(highestExpenseEntry.category)} at ${escapeHtml(highestExpenseEntry.merchant)}`\n            : 'N/A';\n\n        // Aggregations\n        processedExpenses.forEach(e => {\n            categoryTotals.set(e.category, (categoryTotals.get(e.category) || 0) + e.amount);\n            paymentMethodTotals.set(e.paymentMethod, (paymentMethodTotals.get(e.paymentMethod) || 0) + e.amount);\n            // Ensure merchant isn't null/undefined before trimming\n            const merchantKey = typeof e.merchant === 'string' ? e.merchant.trim() : 'N/A';\n            merchantTotals.set(merchantKey, (merchantTotals.get(merchantKey) || 0) + e.amount);\n            dailySpending.set(e.dateStr, (dailySpending.get(e.dateStr) || 0) + e.amount);\n        });\n    } else {\n         // Try to get month/year from the date calculation node if possible\n        // This requires passing the calculated dates into this function or accessing them globally\n        // For simplicity now, it will use N/A if no data\n        // report_month_year = // Set based on input/global scope if needed\n    }\n\n    const calculatePercentage = (value, total) => total === 0 ? 0 : (value / total) * 100;\n\n    // --- Generate HTML Row Strings with ENHANCED Styles ---\n    const noDataRow = (colspan, message = \"No data available for this section.\") => `<tr><td colspan=\"${colspan}\" style=\"padding: 15px; text-align: center; color: #888888; border-bottom: 1px solid #e0e0e0; font-style: italic;\">${escapeHtml(message)}</td></tr>`;\n\n    // ** Enhanced Styles ** (Copied from original, ensure consistency)\n    const tdStyle = \"padding: 12px 10px; text-align: left; vertical-align: middle; border-bottom: 1px solid #e0e0e0;\";\n    const tdRightStyle = tdStyle + \" text-align: right;\";\n    const tdCurrencyStyle = tdRightStyle + \" font-weight: 500;\";\n    const tdNotesStyle = tdStyle + \" font-size: 12px; color: #666666; max-width: 150px; word-break: break-word;\";\n    const barContainerStyle = \"background-color: #f0f0f0; border-radius: 4px; overflow: hidden; display: inline-block; width: 70px; height: 10px; vertical-align: middle; margin-right: 8px;\";\n    const barStylePrimary = \"background-color: #4A90E2; height: 100%;\";\n    const barStyleSecondary = \"background-color: #50E3C2; height: 100%;\";\n    const barContainerSecondary = barContainerStyle.replace('#f0f0f0', '#e4fcf9');\n    const percentageTextStyle = \"font-size: 12px; display: inline-block; vertical-align: middle; width: 45px; text-align: right; color: #555555;\";\n\n     // Handle empty data case for rows\n     const categories_html_rows = categoryTotals.size > 0 ? Array.from(categoryTotals.entries())\n        .sort(([, amountA], [, amountB]) => amountB - amountA)\n        .map(([name, total]) => {\n            const percentage = calculatePercentage(total, total_spent);\n            const percentageValue = parseFloat(percentage.toFixed(1));\n            const percentageFormatted = percentage.toFixed(1) + '%';\n            return `<tr>\n                            <td style=\"${tdStyle}\">${escapeHtml(name)}</td>\n                            <td style=\"${tdCurrencyStyle}\">${formatCurrency(total)}</td>\n                            <td style=\"${tdRightStyle} min-width: 130px;\">\n                                <div style=\"${barContainerStyle}\">\n                                    <div style=\"${barStylePrimary} width: ${percentageValue}%;\"></div>\n                                </div>\n                                <span style=\"${percentageTextStyle}\">${percentageFormatted}</span>\n                            </td>\n                        </tr>`;\n        }).join('') : noDataRow(3, processedExpenses.length === 0 ? \"No expenses recorded for this period.\" : \"No category data available.\");\n\n    const top_expenses_html_rows = processedExpenses.length > 0 ? [...processedExpenses]\n        .sort((a, b) => b.amount - a.amount)\n        .slice(0, TOP_N_EXPENSES)\n        .map(expense => {\n            const notesEscaped = escapeHtml(expense.notes);\n            const notesTruncated = truncateText(notesEscaped);\n            return `<tr>\n                            <td style=\"${tdStyle} white-space: nowrap;\">${expense.dateStr}</td>\n                            <td style=\"${tdStyle}\">${escapeHtml(expense.category)}</td>\n                            <td style=\"${tdStyle}\">${escapeHtml(expense.merchant)}</td>\n                            <td style=\"${tdNotesStyle}\" title=\"${notesEscaped}\">${notesTruncated}</td>\n                            <td style=\"${tdCurrencyStyle} color: #c0392b;\">${formatCurrency(expense.amount)}</td>\n                        </tr>`;\n        }).join('') : noDataRow(5, \"No expenses recorded for this period.\");\n\n    const payment_methods_html_rows = paymentMethodTotals.size > 0 ? Array.from(paymentMethodTotals.entries())\n        .sort(([, amountA], [, amountB]) => amountB - amountA)\n        .map(([name, total]) => {\n             const percentage = calculatePercentage(total, total_spent);\n            const percentageValue = parseFloat(percentage.toFixed(1));\n            const percentageFormatted = percentage.toFixed(1) + '%';\n            return `<tr>\n                            <td style=\"${tdStyle}\">${escapeHtml(name)}</td>\n                            <td style=\"${tdCurrencyStyle}\">${formatCurrency(total)}</td>\n                            <td style=\"${tdRightStyle} min-width: 130px;\">\n                                <div style=\"${barContainerSecondary}\">\n                                    <div style=\"${barStyleSecondary} width: ${percentageValue}%;\"></div>\n                                </div>\n                                <span style=\"${percentageTextStyle}\">${percentageFormatted}</span>\n                            </td>\n                        </tr>`;\n        }).join('') : noDataRow(3, processedExpenses.length === 0 ? \"No expenses recorded for this period.\" : \"No payment method data available.\");\n\n    const top_merchants_html_rows = merchantTotals.size > 0 ? Array.from(merchantTotals.entries())\n        .filter(([name]) => name !== 'N/A') // Don't list 'N/A' as a top merchant\n        .sort(([, amountA], [, amountB]) => amountB - amountA)\n        .slice(0, TOP_N_MERCHANTS)\n        .map(([name, total]) => `\n        <tr>\n            <td style=\"${tdStyle}\">${escapeHtml(name)}</td>\n            <td style=\"${tdCurrencyStyle}\">${formatCurrency(total)}</td>\n        </tr>`).join('') : noDataRow(2, processedExpenses.length === 0 ? \"No expenses recorded for this period.\" : \"No merchant data available.\");\n        if (processedExpenses.length > 0 && top_merchants_html_rows === '') {\n          // If there were expenses but all merchants were 'N/A'\n          top_merchants_html_rows = noDataRow(2, \"No specific merchant data available.\")\n        }\n\n\n    // --- Spending Observations Text ---\n    let spending_observations_text = '';\n    if (processedExpenses.length > 0 && dailySpending.size > 0) {\n        const spendingDays = Array.from(dailySpending.entries()).map(([dateStr, amount]) => ({ dateStr, amount, dateObj: new Date(dateStr + 'T00:00:00Z') })); // Use UTC for consistency\n        const validSpendingDays = spendingDays.filter(day => !isNaN(day.dateObj.getTime()));\n        if (validSpendingDays.length > 0) {\n             validSpendingDays.sort((a, b) => a.dateObj - b.dateObj); // Sort by date\n             const highestDay = validSpendingDays.reduce((max, day) => day.amount > max.amount ? day : max, validSpendingDays[0]);\n             const lowestDay = validSpendingDays.reduce((min, day) => day.amount < min.amount ? day : min, validSpendingDays[0]);\n\n             spending_observations_text = `Spending occurred on <strong>${numUniqueDays}</strong> distinct day(s) between ${formatDateMonDDYYYY(startDate)} and ${formatDateMonDDYYYY(endDate)}.`;\n             if (highestDay) {\n                 spending_observations_text += `<br>â€¢ Highest spending day: ${formatDateMonDDYYYY(highestDay.dateObj)} (<strong style=\"color:#c0392b;\">${formatCurrency(highestDay.amount)}</strong>).`;\n             }\n            if (lowestDay && validSpendingDays.length > 1 && lowestDay.dateStr !== highestDay?.dateStr) {\n                 spending_observations_text += `<br>â€¢ Lowest spending day: ${formatDateMonDDYYYY(lowestDay.dateObj)} (<strong style=\"color:#27ae60;\">${formatCurrency(lowestDay.amount)}</strong>).`;\n            } else if (validSpendingDays.length === 1 && highestDay) {\n                 spending_observations_text = `Only one day of spending recorded: ${formatDateMonDDYYYY(highestDay.dateObj)} (<strong>${formatCurrency(highestDay.amount)}</strong>).`;\n            }\n        } else { spending_observations_text = \"Could not determine spending trends due to invalid date formats in source data.\"; }\n    } else { spending_observations_text = \"No spending recorded for this period, or not enough data for observations.\"; }\n\n\n    // --- Generation Timestamp ---\n    const generation_timestamp = new Date().toLocaleString(LOCALE, { dateStyle: 'long', timeStyle: 'short', hour12: false });\n\n    // --- Construct Final HTML Document with ENHANCED Styles ---\n    // (Using the same HTML structure and styles as before)\n    const finalHtml = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Expense Report - ${escapeHtml(report_month_year)}</title>\n    <style type=\"text/css\">\n        body, table, td, th { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 14px; color: #333333; line-height: 1.6; }\n        body { width: 100% !important; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; margin: 0; padding: 0; background-color: #f7f7f7; } \n        table { border-collapse: collapse; mso-table-lspace: 0pt; mso-table-rspace: 0pt; border-spacing: 0; width: 100%;}\n        td, th { padding: 0; margin: 0; vertical-align: top;}\n        img { border: 0; outline: none; text-decoration: none; -ms-interpolation-mode: bicubic; display: block; }\n        h2 { color: #2c3e50; border-bottom: 3px solid #4A90E2; padding-bottom: 15px; margin-top: 0; margin-bottom: 30px; font-size: 26px; font-weight: 600; }\n        h3 { color: #34495e; margin-top: 35px; margin-bottom: 18px; font-size: 18px; font-weight: 600; border-bottom: 1px solid #e0e0e0; padding-bottom: 10px; padding-top: 10px; }\n        p { margin-top: 0; margin-bottom: 1em; }\n        strong { font-weight: 600; }\n        .container { max-width: 680px; margin: 20px auto; background-color: #ffffff; border: 1px solid #dddddd; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.05); }\n        .content-padding { padding: 30px; }\n        .summary-box { background-color: #f0f4f8; padding: 20px 25px; margin-bottom: 30px; border-radius: 6px; border-left: 5px solid #4A90E2; }\n        .summary-box h3 { margin-top: 0; margin-bottom: 18px; font-size: 18px; font-weight: 600; color: #2c3e50; border-bottom: none; padding-bottom: 0; }\n        .summary-table td { padding: 10px 5px; vertical-align: middle; font-size: 14px; }\n        .summary-table tr:not(:last-child) td { border-bottom: 1px solid #d0d9e2; }\n        .summary-label { font-weight: 600; color: #555555; text-align: left; }\n        .summary-value { text-align: right; color: #333333; }\n        .summary-total { font-weight: bold; color: #c0392b; }\n        .table-header th { padding: 12px 10px; text-align: left; font-weight: bold; color: #ffffff; background-color: #4A90E2; border-bottom: 2px solid #3a7bc8; }\n        .table-header th.align-right { text-align: right; }\n        .table-header-alt th { background-color: #869aad; border-bottom-color: #768ca0; }\n        .observation-box { background-color: #fdfdfd; padding: 18px 22px; margin-bottom: 30px; border-radius: 6px; font-size: 13px; border: 1px solid #eeeeee; color: #444444; }\n        .footer { text-align: center; font-size: 12px; color: #999999; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e0e0e0; }\n    </style>\n</head>\n<body style=\"margin: 0; padding: 0; background-color: #f7f7f7; width: 100% !important;\">\n    <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: #f7f7f7;\">\n        <tr>\n            <td align=\"center\" valign=\"top\">\n                <table class=\"container\" width=\"680\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                    <tr>\n                        <td class=\"content-padding\">\n                            <h2>ðŸ“Š Monthly Expense Report â€“ ${escapeHtml(report_month_year)}</h2>\n\n                            \n                            <div class=\"summary-box\">\n                                <h3>Summary</h3>\n                                <table class=\"summary-table\" width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                    <tr><td class=\"summary-label\">Report Period:</td><td class=\"summary-value\">${report_start_date} to ${report_end_date}</td></tr>\n                                    <tr><td class=\"summary-label\">Total Spent:</td><td class=\"summary-value\"><strong class=\"summary-total\">${formatCurrency(total_spent)}</strong></td></tr>\n                                    <tr><td class=\"summary-label\">Total Expenses:</td><td class=\"summary-value\">${total_expense_count}</td></tr>\n                                    <tr><td class=\"summary-label\">Avg. Daily Spending:</td><td class=\"summary-value\">${formatCurrency(average_daily_spending)}</td></tr>\n                                    <tr><td class=\"summary-label\">Highest Expense:</td><td class=\"summary-value\">${highest_expense_details_raw}</td></tr>\n                                </table>\n                            </div>\n\n                            \n                            <h3>Spending by Category</h3>\n                            <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"margin-bottom: 35px;\">\n                                <thead class=\"table-header\"><tr><th>Category</th><th class=\"align-right\">Total Spent</th><th class=\"align-right\" style=\"min-width: 130px;\">Percentage</th></tr></thead>\n                                <tbody>\n                                    ${categories_html_rows}\n                                </tbody>\n                            </table>\n\n                            \n                            <h3>Top ${TOP_N_EXPENSES} Expenses</h3>\n                            <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"margin-bottom: 35px;\">\n                                <thead class=\"table-header table-header-alt\"><tr><th>Date</th><th>Category</th><th>Merchant</th><th>Notes</th><th class=\"align-right\">Amount</th></tr></thead>\n                                <tbody>\n                                    ${top_expenses_html_rows}\n                                </tbody>\n                            </table>\n\n                            \n                            <h3>Spending by Payment Method</h3>\n                             <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"margin-bottom: 35px;\">\n                                <thead class=\"table-header\"><tr><th>Payment Method</th><th class=\"align-right\">Total Spent</th><th class=\"align-right\" style=\"min-width: 130px;\">Percentage</th></tr></thead>\n                                <tbody>\n                                    ${payment_methods_html_rows}\n                                </tbody>\n                            </table>\n\n                            \n                            <h3>Top ${TOP_N_MERCHANTS} Merchants</h3>\n                            <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"margin-bottom: 35px;\">\n                                <thead class=\"table-header table-header-alt\"><tr><th>Merchant</th><th class=\"align-right\">Total Spent</th></tr></thead>\n                                <tbody>\n                                    ${top_merchants_html_rows}\n                                </tbody>\n                            </table>\n\n                            \n                            <h3>Observations</h3>\n                            <div class=\"observation-box\">\n                                <p>${spending_observations_text}</p>\n                            </div>\n\n                            \n                            <div class=\"footer\">\n                                <p>This is an automated report generated by the SpendSense Workflow.</p>\n                                <p>Report generated on: ${generation_timestamp}</p>\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</html>\n`;\n\n    return { json: { htmlContent: finalHtml } };\n}\n\n// Assuming 'expenseData' is an array of expense objects from the previous node\nreturn generateExpenseReportHtml(expenseData);\n"
      },
      "id": "67916c0a-f810-48b8-b308-233a08151fd7",
      "name": "Code - Generate HTML Report",
      "type": "n8n-nodes-base.code",
      "position": [
        1320,
        780
      ],
      "typeVersion": 2
    }
  ],
  "connections": {
    "Gmail Trigger - Expense Emails": {
      "main": [
        [
          {
            "id": "2178c98e-be1a-4b8f-aeb4-c67143195857",
            "name": "Code - Clean & Validate Email Extraction",
            "type": "n8n-nodes-base.code",
            "position": [
              1320,
              280
            ]
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "id": "2178c98e-be1a-4b8f-aeb4-c67143195857",
            "name": "Code - Clean & Validate Email Extraction",
            "type": "n8n-nodes-base.code",
            "position": [
              1320,
              280
            ]
          }
        ]
      ]
    },
    "Schedule Trigger - Monthly Report": {
      "main": [
        [
          {
            "id": "234360ab-3854-42f9-aa1b-6a317b071d67",
            "name": "Code - Calculate Prev Month Dates",
            "type": "n8n-nodes-base.code",
            "position": [
              920,
              780
            ]
          }
        ]
      ]
    },
    "Code - Calculate Prev Month Dates": {
      "main": [
        [
          {
            "id": "46044716-9198-4963-9a04-e7b3a2bf3831",
            "name": "Airtable - Get Prev Month Data",
            "type": "n8n-nodes-base.airtable",
            "position": [
              1120,
              780
            ]
          }
        ]
      ]
    },
    "Airtable - Get Prev Month Data": {
      "main": [
        [
          {
            "id": "67916c0a-f810-48b8-b308-233a08151fd7",
            "name": "Code - Generate HTML Report",
            "type": "n8n-nodes-base.code",
            "position": [
              1320,
              780
            ]
          }
        ]
      ]
    }
  }
}
